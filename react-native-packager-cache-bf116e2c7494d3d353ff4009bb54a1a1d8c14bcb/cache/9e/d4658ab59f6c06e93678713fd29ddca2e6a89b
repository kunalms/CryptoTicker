
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _jsxFileName = '/home/kunal/ReactNativeProjects/CryptoTicker/node_modules/react-native/Libraries/Components/ProgressBarAndroid/ProgressBarAndroid.android.js';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ActivityIndicator = require('ActivityIndicator');
var ColorPropType = require('ColorPropType');
var PropTypes = require('prop-types');
var React = require('React');
var ReactNative = require('ReactNative');
var ViewPropTypes = require('ViewPropTypes');

var STYLE_ATTRIBUTES = ['Horizontal', 'Normal', 'Small', 'Large', 'Inverse', 'SmallInverse', 'LargeInverse'];

var indeterminateType = function indeterminateType(props, propName, componentName) {
  var checker = function checker() {
    var indeterminate = props[propName];
    var styleAttr = props.styleAttr;
    if (!indeterminate && styleAttr !== 'Horizontal') {
      return new Error('indeterminate=false is only valid for styleAttr=Horizontal');
    }
  };

  for (var _len = arguments.length, rest = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
    rest[_key - 3] = arguments[_key];
  }

  return PropTypes.bool.apply(PropTypes, [props, propName, componentName].concat(rest)) || checker();
};

var ProgressBarAndroid = function (_ReactNative$NativeCo) {
  _inherits(ProgressBarAndroid, _ReactNative$NativeCo);

  function ProgressBarAndroid() {
    _classCallCheck(this, ProgressBarAndroid);

    return _possibleConstructorReturn(this, (ProgressBarAndroid.__proto__ || Object.getPrototypeOf(ProgressBarAndroid)).apply(this, arguments));
  }

  _createClass(ProgressBarAndroid, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (this.props.indeterminate && this.props.styleAttr !== 'Horizontal') {
        console.warn('Circular indeterminate `ProgressBarAndroid`' + 'is deprecated. Use `ActivityIndicator` instead.');
      }
    }
  }, {
    key: 'render',
    value: function render() {
      return React.createElement(ActivityIndicator, _extends({}, this.props, { animating: true, __source: {
          fileName: _jsxFileName,
          lineNumber: 115
        }
      }));
    }
  }]);

  return ProgressBarAndroid;
}(ReactNative.NativeComponent);

ProgressBarAndroid.propTypes = _extends({}, ViewPropTypes, {
  styleAttr: PropTypes.oneOf(STYLE_ATTRIBUTES),

  indeterminate: indeterminateType,

  progress: PropTypes.number,

  color: ColorPropType,

  testID: PropTypes.string
});
ProgressBarAndroid.defaultProps = {
  styleAttr: 'Normal',
  indeterminate: true
};


module.exports = ProgressBarAndroid;